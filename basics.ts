let users: { name: string, age: number, email: string, isLoggedIn: boolean }[] = [];

let user = {
    name: "John",
    age: 30,
    email: "john@example.com",
    isLoggedIn: false
};

users.push(user);

let greetings: string = "Hello Hamza";
let userID = 334455.3;
let aVarToRecvType //:string ;

function aFunctionThatReturnAType() {
    return -1
}

aVarToRecvType = aFunctionThatReturnAType();

function addTwo(num: number) : number {
    return num + 2;
}
addTwo(2);

function signUp(name: string, email: string, age: number, isLoggedIn: boolean = true) {
    return {
        name: name,
        email: email,
        age: age,
        isLoggedIn: isLoggedIn
    }
}

type User = { readonly _id?: number, name: string, email: string, age: number, isLoggedIn: boolean }; // _id is optional and will be generated by the database

function logOutUser(user: User) {

    if (user === undefined) {
        return handleError("User not found");
    }

    return {
        ...user,
        isLoggedIn: false
    }
}

let newUserIndex = users.push(signUp("Hamza", "hamza@example.com", 22))-1;

// console.log(users[newUserIndex]);
// console.log(logOutUser(users[newUserIndex]));

users[newUserIndex] = logOutUser(users[newUserIndex]);
console.log("Printing users");

let consoleError = (error: any) : void => console.log("Error: ", error);
let handleError = (error: string) : never => {  throw new Error(error); };

let anotherUserIndex = users.push(signUp("Hyam", "hyam@example.com", 25))-1;
try {
    users[anotherUserIndex] = logOutUser(users[anotherUserIndex]);

} catch (error) {
    consoleError(error);
}

users.forEach( (u) => console.log(u) );

type cardNumber = {
    cardNumber: string;
    cardType: string;
}

type cardDate = {
    expiryMonth: number;
    expiryYear: number;
}

type bankDetails = {
    cvv: number;
    bankName: string;
    bankBranch: string;
    branchAddress: string;
    bankAccountNumber: string;
    bankAccountName: string;
};

type cardDetails = cardNumber & cardDate & bankDetails;

let myCard: cardDetails = {
    cardNumber: "1234567890",
    cardType: "Visa",
    expiryMonth: 12,
    expiryYear: 2022,
    cvv: 123,
    bankName: "Bank of America",
    bankBranch: "Downtown",
    branchAddress: "1234 Main St, Anytown",
    bankAccountNumber: "1234567890",
    bankAccountName: "John Doe"
};

// console.log(myCard);

type userDetails = User & cardDetails;

let userWithCard: userDetails = {
    ...users[anotherUserIndex],
    ...myCard
};

// console.log(userWithCard);

/* union types - in-depth */

type Admin = {
    role: "Admin";
    adminLevel: number;
}

type Employee = {
    role: "Employee";
    employeeId: number;
}

type Role = Admin | Employee;

let newUser: Role = {
    role: "Employee",
    employeeId: 1234567890
}

// console.log(newUser);

newUser = {
    role: "Admin",
    adminLevel: 1
}

console.log(newUser);

function getDBID(id: string | number) {
    if (typeof id === "string") {
        return id.toUpperCase();
    }
    return id;
}

// console.log(`${getDBID("a1234567890")} typeof ${typeof getDBID("a1234567890")}`);
// console.log(`${getDBID(1234567890)} typeof ${typeof getDBID(1234567890)}`);

let arr1: string[] = ["a", "b", "c"];
let arr2: number[] = [1, 2, 3];
let arr4: string[] | number[] = [1, 2, 3];
let arr3: (string | number)[] = ["a", "b", "c", 1, 2, 3];
let arr5: (string | number | boolean)[] = ["a", "b", "c", 1, 2, 3, true];

// literal assignment of variables

let pi: 3.14 = 3.14;
let e: 2.71 = 2.71;
let phi: 1.618 = 1.618;
// pi = 3.142;  // would not allow 
let seatAllocation: "aisle" | "middle" | "window" = "middle";
seatAllocation = "aisle";
// seatAllocation = "fourth"; // would not allow 

// tuples - precise order

let tuple1: [string, number, boolean] = ["a", 1, true];
let tuple2: [string, number, boolean] = ["a", 1, true];
console.log(tuple1 === tuple2);

/*
    The comparison tuple1 === tuple2 returns false 
    because tuple1 and tuple2 are objects, 
    and the === operator compares object references, 
    not their contents.

    In JavaScript, 
    arrays and objects are compared by their references. 
    This means that two different arrays or objects are considered equal 
    only if they reference the exact same instance in memory.
    
    The === operator checks for strict equality, 
    which for objects (including arrays) means checking 
    if they reference the same instance. 

    Each let statement allocates a new array in memory. 
    As a result, tuple1 and tuple2 point to different memory locations.
    Therefore, tuple1 === tuple2 returns false.

    // function to compare each corresponding element of the tuples
    function compareTuples(tuple1: [string, number, boolean], tuple2: [string, number, boolean]): boolean {
        return tuple1[0] === tuple2[0] && tuple1[1] === tuple2[1] && tuple1[2] === tuple2[2];
    }
*/

let apiResponse: [number, string] = [200, "OK"];
let apiResponse2: [number, string] = [404, "Not Found"];
// console.log(apiResponse); console.log(apiResponse2);

type Student = [string, number, string]
const student: Student = ["Hamza", 22, "Software Engineering"];
const student2: Student = ["Hyam", 25, "Computer Engineering"];
student2[2] = "Computer System Engineering";
// console.log(student); console.log(student2);

let rgb: [number, number, number] = [255, 0, 0];
// console.log(rgb);

/* enums */
// enums are a type of variable that can be one of a set of predefined values
// Using const before enum makes the javascript equivalent very simple

const enum SeatChoice {
    NoSeat,
    Aisle = "aisle",
    Middle = "middle",
    Window = "window",
    Fourth = 4
}
const mySeat = SeatChoice.NoSeat;
// console.log(mySeat);

/* interfaces */
interface websiteUser {
    readonly dbID: number,
    email: string,
    userName: string,
    googleID?: string,
    //startTrial: () => string
    startTrial(): string,
    getCoupon(couponName: string): number 
}
const firstWebUser: websiteUser = {
    dbID: 1,
    email: 'firstUser@website',
    userName: '@firstUser',
    startTrial: () => `trial started on ${new Date().toLocaleDateString('ur')}`,
    //getCoupon: (name:'hyam10') => `${10} via coupon code: '${name}'`
    getCoupon: (name:'hyam10') => 10,
    /* extended later */
    githubToken: 'someToken'
}
firstWebUser.email = 'firstUser@website.com';
firstWebUser.googleID = 'firstUser@gmail.com';
console.log(firstWebUser);

/* reopening interface ?? */
interface websiteUser {
    githubToken: string
}

interface websiteRoles extends websiteUser {
    role: "admin" | "moderator" | "user"
}

// explore documentation for further info on interface vs type
